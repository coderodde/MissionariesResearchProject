package net.coderodde.research.missionaries;

import static net.coderodde.research.missionaries.Utilities.checkIntNotLess;

/**
 * This class holds the configuration of the game.
 * 
 * @author Rodion "rodde" Efremov
 * @version 1.61
 */
class GameConfiguration {

    /**
     * The minimum boat capacity.
     */
    private static final int MIN_BOAT_CAPACITY = 1;

    /**
     * The minimum allowed amount of cannibals or missionaries.
     */
    private static final int MIN_TOTAL = 1;

    /**
     * The total amount of missionaries involved in the game.
     */
    private final int totalMissionaries;

    /**
     * The total amount of cannibals involved in the game.
     */
    private final int totalCannibals;

    /**
     * The boat capacity in the game.
     */
    private final int boatCapacity;

    /**
     * Constructs new configuration object.
     * 
     * @param totalMissionaries
     * @param totalCannibals
     * @param boatCapacity 
     */
    GameConfiguration(int totalMissionaries, 
                      int totalCannibals,
                      int boatCapacity) {
        checkBoatCapacity(boatCapacity);
        checkTotalMissionaries(totalMissionaries);
        checkTotalCannibals(totalCannibals);

        this.totalMissionaries = totalMissionaries;
        this.totalCannibals = totalCannibals;
        this.boatCapacity = boatCapacity;
    }

    @Override
    public boolean equals(Object o) {
        if (!(o instanceof GameConfiguration)) {
            return false;
        }

        GameConfiguration other = (GameConfiguration) o;

        return totalMissionaries == other.totalMissionaries 
                && totalCannibals == other.totalCannibals
                && boatCapacity == other.boatCapacity;
    }

    @Override
    public int hashCode() {
        // Generated by NetBeans.
        int hash = 3;
        hash = 73 * hash + this.totalMissionaries;
        hash = 73 * hash + this.totalCannibals;
        hash = 73 * hash + this.boatCapacity;
        return hash;
    }

    int getTotalMissionaries() {
        return totalMissionaries;
    }

    int getTotalCannibals() {
        return totalCannibals;
    }

    int getBoatCapacity() {
        return boatCapacity;
    }

    /**
     * Checks that the total amount of missionaries is sensible.
     * 
     * @param totalMissionaries total amount of missionaries.
     */
    private static void checkTotalMissionaries(int totalMissionaries) {
        checkIntNotLess(totalMissionaries, 
                        MIN_TOTAL, 
                        "The total amount of missionaries is too small: " +
                        totalMissionaries + ". Should be at least " +
                        MIN_TOTAL);
    }

    /**
     * Checks that the total amount of cannibals is sensible.
     * 
     * @param totalCannibals total amount of cannibals.
     */
    private static void checkTotalCannibals(int totalCannibals) {
        checkIntNotLess(totalCannibals, 
                        MIN_TOTAL, 
                        "The total amount of cannibals is too small: " +
                        totalCannibals + ". Should be at least " +
                        MIN_TOTAL);
    }

    /**
     * Checks that boat capacity is sensible.
     * 
     * @param boatCapacity the boat capacity.
     */
    private static void checkBoatCapacity(int boatCapacity) {
        checkIntNotLess(boatCapacity, 
                        MIN_BOAT_CAPACITY, 
                        "Boat capacity too small: " + boatCapacity + ", " +
                        "must be at least " + MIN_BOAT_CAPACITY + ".");
    }
}